//   Copyright 2012-2013 Fraunhofer FOKUS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
package de.fraunhofer.fokus.fuzzing.fuzzino.heuristics.generators;

import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import de.fraunhofer.fokus.fuzzing.fuzzino.FuzzedValue;
import de.fraunhofer.fokus.fuzzing.fuzzino.heuristics.ComputableFuzzingHeuristic;
import de.fraunhofer.fokus.fuzzing.fuzzino.heuristics.ComputableListImpl;
import de.fraunhofer.fokus.fuzzing.fuzzino.heuristics.FuzzingHeuristic;

/**
 * A fuzzing generator that simply returns values of a list.
 * 
 * To implement a SimpleFuzzingGenerator the method {@link #getFuzzValues()} must be implemented.
 * 
 * @author Martin Schneider (martin.schneider@fokus.fraunhofer.de)
 *
 * @param <T> the type of the values that are generated by this fuzzing heuristic.
 */
public abstract class SimpleFuzzingGenerator<T> extends ComputableListImpl<FuzzedValue<T>> 
                                                implements ComputableFuzzingHeuristic<T> {

	private static final long serialVersionUID = -8543542004586252385L;
	protected List<FuzzingHeuristic> owners;
	protected long seed;
	protected Random random;
	
	/**
	 * Constructor for subclasses.
	 * 
	 * @param seed The seed to be used for random-based fuzzing heuristics.
	 */
	protected SimpleFuzzingGenerator(long seed) {
		this.seed = seed;
		this.random = new Random(this.seed);
		this.owners = new LinkedList<>();
	}
	
	/**
	 * Constructor for subclasses.
	 * 
	 * @param seed The seed to be used for random-based fuzzingheuristics.
	 * @param owners The fuzzing heuristic that uses this fuzzing operator for its own purpose.
	 *              fuzzed Value will return {@code owner} instead of {@code this} when calling
	 *              {@link FuzzedValue#getHeuristic()}.
	 */
	protected SimpleFuzzingGenerator(long seed, List<FuzzingHeuristic> owners) {
		this.seed = seed;
		random = new Random(this.seed);
		this.owners = new LinkedList<>(owners);
	}
	
	@Override
	public FuzzedValue<T> computeElement(int index) {
		T fuzzedValueItself = getFuzzValues().get(index);
		FuzzedValue<T> fuzzedValue = new FuzzedValue<T>(fuzzedValueItself, owners);
		
		return fuzzedValue;
	}
	
	@Override
	public int size() {
		return getFuzzValues().size();
	}
	
	@Override
	public long getSeed() {
		return seed;
	}
	
	/**
	 * The list of fuzzed values to be returned by this fuzzing generator. In order to reduce
	 * memory consumption, it is recommended to use a static list to hold the values.
	 * 
	 * @return the list of fuzzed values to be returned by this fuzzing generator.
	 */
	public abstract List<T> getFuzzValues();
	
	@Override
	public String toString() {
		return "[SimpleFuzzingGenerator name:" + getName() + " owners:" + owners + " seed:" + seed + "]";
	}
	
}
